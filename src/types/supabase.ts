/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/tasks": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          created_at?: parameters["rowFilter.tasks.created_at"];
          updated_at?: parameters["rowFilter.tasks.updated_at"];
          transaction_hash?: parameters["rowFilter.tasks.transaction_hash"];
          status?: parameters["rowFilter.tasks.status"];
          key_manager?: parameters["rowFilter.tasks.key_manager"];
          profile?: parameters["rowFilter.tasks.profile"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tasks"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tasks */
          tasks?: definitions["tasks"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          created_at?: parameters["rowFilter.tasks.created_at"];
          updated_at?: parameters["rowFilter.tasks.updated_at"];
          transaction_hash?: parameters["rowFilter.tasks.transaction_hash"];
          status?: parameters["rowFilter.tasks.status"];
          key_manager?: parameters["rowFilter.tasks.key_manager"];
          profile?: parameters["rowFilter.tasks.profile"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          created_at?: parameters["rowFilter.tasks.created_at"];
          updated_at?: parameters["rowFilter.tasks.updated_at"];
          transaction_hash?: parameters["rowFilter.tasks.transaction_hash"];
          status?: parameters["rowFilter.tasks.status"];
          key_manager?: parameters["rowFilter.tasks.key_manager"];
          profile?: parameters["rowFilter.tasks.profile"];
        };
        body: {
          /** tasks */
          tasks?: definitions["tasks"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/services": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.services.id"];
          key_manager?: parameters["rowFilter.services.key_manager"];
          created_at?: parameters["rowFilter.services.created_at"];
          updated_at?: parameters["rowFilter.services.updated_at"];
          api_key?: parameters["rowFilter.services.api_key"];
          contracts?: parameters["rowFilter.services.contracts"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["services"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** services */
          services?: definitions["services"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.services.id"];
          key_manager?: parameters["rowFilter.services.key_manager"];
          created_at?: parameters["rowFilter.services.created_at"];
          updated_at?: parameters["rowFilter.services.updated_at"];
          api_key?: parameters["rowFilter.services.api_key"];
          contracts?: parameters["rowFilter.services.contracts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.services.id"];
          key_manager?: parameters["rowFilter.services.key_manager"];
          created_at?: parameters["rowFilter.services.created_at"];
          updated_at?: parameters["rowFilter.services.updated_at"];
          api_key?: parameters["rowFilter.services.api_key"];
          contracts?: parameters["rowFilter.services.contracts"];
        };
        body: {
          /** services */
          services?: definitions["services"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          profile?: parameters["rowFilter.users.profile"];
          created_at?: parameters["rowFilter.users.created_at"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          quota_used?: parameters["rowFilter.users.quota_used"];
          quota_start_date?: parameters["rowFilter.users.quota_start_date"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          profile?: parameters["rowFilter.users.profile"];
          created_at?: parameters["rowFilter.users.created_at"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          quota_used?: parameters["rowFilter.users.quota_used"];
          quota_start_date?: parameters["rowFilter.users.quota_start_date"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          profile?: parameters["rowFilter.users.profile"];
          created_at?: parameters["rowFilter.users.created_at"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          quota_used?: parameters["rowFilter.users.quota_used"];
          quota_start_date?: parameters["rowFilter.users.quota_start_date"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/index_checkpoint": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.index_checkpoint.id"];
          contract?: parameters["rowFilter.index_checkpoint.contract"];
          created_at?: parameters["rowFilter.index_checkpoint.created_at"];
          updated_at?: parameters["rowFilter.index_checkpoint.updated_at"];
          block?: parameters["rowFilter.index_checkpoint.block"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["index_checkpoint"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** index_checkpoint */
          index_checkpoint?: definitions["index_checkpoint"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.index_checkpoint.id"];
          contract?: parameters["rowFilter.index_checkpoint.contract"];
          created_at?: parameters["rowFilter.index_checkpoint.created_at"];
          updated_at?: parameters["rowFilter.index_checkpoint.updated_at"];
          block?: parameters["rowFilter.index_checkpoint.block"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.index_checkpoint.id"];
          contract?: parameters["rowFilter.index_checkpoint.contract"];
          created_at?: parameters["rowFilter.index_checkpoint.created_at"];
          updated_at?: parameters["rowFilter.index_checkpoint.updated_at"];
          block?: parameters["rowFilter.index_checkpoint.block"];
        };
        body: {
          /** index_checkpoint */
          index_checkpoint?: definitions["index_checkpoint"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  tasks: {
    /** Format: bigint */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: text */
    transaction_hash: string;
    /**
     * Format: public.tasks_status
     * @default unknown
     * @enum {string}
     */
    status: "unknown" | "pending" | "completed" | "failed";
    /** Format: text */
    key_manager: string;
    /** Format: text */
    profile?: string;
  };
  services: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    key_manager: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: text */
    api_key?: string;
    /** Format: jsonb */
    contracts?: unknown;
  };
  users: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    profile: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /**
     * Format: bigint
     * @default 0
     */
    quota_used: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    quota_start_date: string;
  };
  index_checkpoint: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    contract: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: bigint */
    block: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description tasks */
  "body.tasks": definitions["tasks"];
  /** Format: bigint */
  "rowFilter.tasks.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.tasks.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.tasks.updated_at": string;
  /** Format: text */
  "rowFilter.tasks.transaction_hash": string;
  /** Format: public.tasks_status */
  "rowFilter.tasks.status": string;
  /** Format: text */
  "rowFilter.tasks.key_manager": string;
  /** Format: text */
  "rowFilter.tasks.profile": string;
  /** @description services */
  "body.services": definitions["services"];
  /** Format: bigint */
  "rowFilter.services.id": string;
  /** Format: text */
  "rowFilter.services.key_manager": string;
  /** Format: timestamp with time zone */
  "rowFilter.services.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.services.updated_at": string;
  /** Format: text */
  "rowFilter.services.api_key": string;
  /** Format: jsonb */
  "rowFilter.services.contracts": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: bigint */
  "rowFilter.users.id": string;
  /** Format: text */
  "rowFilter.users.profile": string;
  /** Format: timestamp with time zone */
  "rowFilter.users.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.users.updated_at": string;
  /** Format: bigint */
  "rowFilter.users.quota_used": string;
  /** Format: timestamp with time zone */
  "rowFilter.users.quota_start_date": string;
  /** @description index_checkpoint */
  "body.index_checkpoint": definitions["index_checkpoint"];
  /** Format: bigint */
  "rowFilter.index_checkpoint.id": string;
  /** Format: text */
  "rowFilter.index_checkpoint.contract": string;
  /** Format: timestamp with time zone */
  "rowFilter.index_checkpoint.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.index_checkpoint.updated_at": string;
  /** Format: bigint */
  "rowFilter.index_checkpoint.block": string;
}
