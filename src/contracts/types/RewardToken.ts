/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type OraclesChanged = ContractEventLog<{
  previous: string;
  current: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RewardsRedeemed = ContractEventLog<{
  account: string;
  amount: string;
  0: string;
  1: string;
}>;
export type RewardsUpdated = ContractEventLog<{
  account: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface RewardToken extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RewardToken;
  clone(): RewardToken;
  methods: {
    allowance(
      owner: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    balanceOf(account: string): NonPayableTransactionObject<string>;

    decimals(): NonPayableTransactionObject<string>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    name(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    redeem(amount: number | string | BN): PayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rewardsRate(): NonPayableTransactionObject<string>;

    setOracles(newOracles: string): NonPayableTransactionObject<void>;

    setRate(newRate: number | string | BN): NonPayableTransactionObject<void>;

    submitRewards(
      account: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    symbol(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      to: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    OraclesChanged(cb?: Callback<OraclesChanged>): EventEmitter;
    OraclesChanged(
      options?: EventOptions,
      cb?: Callback<OraclesChanged>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RewardsRedeemed(cb?: Callback<RewardsRedeemed>): EventEmitter;
    RewardsRedeemed(
      options?: EventOptions,
      cb?: Callback<RewardsRedeemed>
    ): EventEmitter;

    RewardsUpdated(cb?: Callback<RewardsUpdated>): EventEmitter;
    RewardsUpdated(
      options?: EventOptions,
      cb?: Callback<RewardsUpdated>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "OraclesChanged", cb: Callback<OraclesChanged>): void;
  once(
    event: "OraclesChanged",
    options: EventOptions,
    cb: Callback<OraclesChanged>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RewardsRedeemed", cb: Callback<RewardsRedeemed>): void;
  once(
    event: "RewardsRedeemed",
    options: EventOptions,
    cb: Callback<RewardsRedeemed>
  ): void;

  once(event: "RewardsUpdated", cb: Callback<RewardsUpdated>): void;
  once(
    event: "RewardsUpdated",
    options: EventOptions,
    cb: Callback<RewardsUpdated>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
